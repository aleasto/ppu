# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the pipeline branch
  push:
    branches: [ pipeline ]
  pull_request:
    branches: [ pipeline ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo "Changing to new non-root user"
          useradd -rm -d /home/builder -s /bin/bash -g root -G sudo -u 1001 builder
          apt update
          apt install -y build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev xz-utils tk-dev libffi-dev liblzma-dev python-openssl git unzip iverilog gtkwave yosys
          wget https://github.com/chipsalliance/verible/releases/download/v0.0-2130-gb11bba24/verible-v0.0-2130-gb11bba24-Ubuntu-18.04-bionic-x86_64.tar.gz
          tar -xf verible-v0.0-2130-gb11bba24-Ubuntu-18.04-bionic-x86_64.tar.gz
          cp verible-v0.0-2130-gb11bba24/bin/verible-verilog-format /usr/local/bin/
          wget https://github.com/MikePopoloski/slang/releases/download/v0.9/slang-linux.tar.gz
          tar -xf slang-linux.tar.gz
          cp slang/bin/slang /usr/local/bin/  
          wget https://github.com/zachjs/sv2v/releases/download/v0.0.9/sv2v-Linux.zip
          unzip sv2v-Linux.zip
          cp sv2v-Linux/sv2v /usr/local/bin
          su builder
          git clone https://github.com/pyenv/pyenv.git ~/.pyenv
          echo 'export PYENV_ROOT="$HOME/.pyenv"' >> ~/.bashrc
          echo 'export PATH="$PYENV_ROOT/bin:$PATH"' >> ~/.bashrc
          echo -e 'if command -v pyenv 1>/dev/null 2>&1; then\n eval "$(pyenv init --path)"\nfi' >> ~/.bashrc
          source ~/.bashrc
          pyenv install 3.10.0
          pyenv global 3.10.0
          pip install maturin
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          source $HOME/.cargo/env
          git clone git@bitbucket.org:riscv-ppu/hardposit.git
          cd hardposit/bindings/py-hardposit
          make
          cd $HOME
          mkdir RISCV-PPU && cd RISCV-PPU
          git clone git@bitbucket.org:riscv-ppu/ppu.git
          git clone git@bitbucket.org:riscv-ppu/pacogen.git PACoGen
          cd ppu
          export RISCV_PPU_DIR=$(cd .. && pwd)
          git checkout pipeline
          make gen-test-vectors
          make ppu WORD=64 F=32 N=8 ES=0
          ls fpga/quartus/
