$date
	Sat Dec  4 16:55:55 2021
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module tb_clo $end
$var wire 3 ! leading_zeros [2:0] $end
$var wire 3 " leading_ones [2:0] $end
$var wire 3 # index_highest_set_2 [2:0] $end
$var wire 3 $ index_highest_set_1 [2:0] $end
$var reg 8 % bits [7:0] $end
$scope module count_leading_ones $end
$var wire 8 & bits [7:0] $end
$var wire 3 ' leading_ones [2:0] $end
$var wire 3 ( index_highest_set [2:0] $end
$scope module highest_set_inst $end
$var wire 8 ) bits [7:0] $end
$var wire 3 * index [2:0] $end
$scope begin _gen[0] $end
$upscope $end
$scope begin _gen[1] $end
$upscope $end
$scope begin _gen[2] $end
$upscope $end
$scope begin _gen[3] $end
$upscope $end
$scope begin _gen[4] $end
$upscope $end
$scope begin _gen[5] $end
$upscope $end
$scope begin _gen[6] $end
$upscope $end
$scope begin _gen[7] $end
$upscope $end
$upscope $end
$upscope $end
$scope module count_leading_zeros $end
$var wire 8 + bits [7:0] $end
$var wire 3 , leading_ones [2:0] $end
$var wire 3 - index_highest_set [2:0] $end
$scope module highest_set_inst $end
$var wire 8 . bits [7:0] $end
$var wire 3 / index [2:0] $end
$scope begin _gen[0] $end
$upscope $end
$scope begin _gen[1] $end
$upscope $end
$scope begin _gen[2] $end
$upscope $end
$scope begin _gen[3] $end
$upscope $end
$scope begin _gen[4] $end
$upscope $end
$scope begin _gen[5] $end
$upscope $end
$scope begin _gen[6] $end
$upscope $end
$scope begin _gen[7] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module tb_posit_decode $end
$var wire 2 0 exp [-1:0] $end
$var wire 3 1 k [2:0] $end
$var wire 8 2 mant [7:0] $end
$var wire 1 3 reg_sign $end
$var wire 8 4 regime [7:0] $end
$var wire 1 5 sign $end
$var wire 1 6 is_zero $end
$var wire 1 7 is_inf $end
$var reg 8 8 bits [7:0] $end
$scope module posit_decode_inst $end
$var wire 8 9 bits [7:0] $end
$var wire 2 : exp [-1:0] $end
$var wire 3 ; k [2:0] $end
$var wire 8 < mant [7:0] $end
$var wire 1 3 reg_sign $end
$var wire 8 = regime [7:0] $end
$var wire 8 > u_bits [7:0] $end
$var wire 1 5 sign $end
$var wire 3 ? leading_ones [2:0] $end
$var wire 1 6 is_zero $end
$var wire 1 7 is_inf $end
$scope module clo_inst $end
$var wire 8 @ bits [7:0] $end
$var wire 3 A leading_ones [2:0] $end
$var wire 3 B index_highest_set [2:0] $end
$scope module highest_set_inst $end
$var wire 8 C bits [7:0] $end
$var wire 3 D index [2:0] $end
$scope begin _gen[0] $end
$upscope $end
$scope begin _gen[1] $end
$upscope $end
$scope begin _gen[2] $end
$upscope $end
$scope begin _gen[3] $end
$upscope $end
$scope begin _gen[4] $end
$upscope $end
$scope begin _gen[5] $end
$upscope $end
$scope begin _gen[6] $end
$upscope $end
$scope begin _gen[7] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b111 D
b10 C
b111 B
b0 A
b10 @
b0 ?
b1 >
bz =
bz <
bz ;
bz :
b1 9
b1 8
07
06
05
bz 4
z3
bz 2
bz 1
bz 0
b0 /
b11111110 .
b0 -
b111 ,
b11111110 +
b111 *
b1 )
b111 (
b0 '
b1 &
b1 %
b111 $
b0 #
b0 "
b111 !
$end
#10
b110 ?
b110 A
b1 B
b1 D
b0 !
b0 ,
b1 "
b1 '
b111 #
b111 -
b111 /
b110 $
b110 (
b110 *
b11111100 @
b11111100 C
b1111110 >
b1111100 +
b1111100 .
b1111110 8
b1111110 9
b10000011 %
b10000011 &
b10000011 )
#20
b1 ?
b1 A
b110 B
b110 D
b10 "
b10 '
b101 $
b101 (
b101 *
b10111100 @
b10111100 C
b1011110 >
b110111 +
b110111 .
b1011110 8
b1011110 9
b11001000 %
b11001000 &
b11001000 )
#30
b0 ?
b0 A
b111 B
b111 D
b10 !
b10 ,
b0 "
b0 '
b101 #
b101 -
b101 /
b111 $
b111 (
b111 *
b1110 @
b1110 C
b111 >
b11001111 +
b11001111 .
b111 8
b111 9
b110000 %
b110000 &
b110000 )
#40
b1 !
b1 ,
b110 #
b110 -
b110 /
b0 @
b0 C
b0 >
b10101010 +
b10101010 .
16
b0 8
b0 9
b1010101 %
b1010101 &
b1010101 )
#50
b111 ?
b111 A
b0 B
b0 D
b0 !
b0 ,
b10 "
b10 '
b111 #
b111 -
b111 /
b101 $
b101 (
b101 *
b11111110 @
b11111110 C
b1111111 >
b111111 +
b111111 .
06
b1111111 8
b1111111 9
b11000000 %
b11000000 &
b11000000 )
#60
b111 "
b111 '
b0 $
b0 (
b0 *
b1 +
b1 .
b11111110 %
b11111110 &
b11111110 )
