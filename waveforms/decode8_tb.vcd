$date
	Sat Dec  4 12:17:22 2021
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module decode8_tb $end
$var wire 1 ! s $end
$var wire 3 " r [2:0] $end
$var wire 8 # k [7:0] $end
$var wire 8 $ f [7:0] $end
$var reg 8 % p8 [7:0] $end
$scope module decode8_inst $end
$var wire 8 & p8 [7:0] $end
$var wire 3 ' reg_length_w [2:0] $end
$var wire 7 ( k_value_w [6:0] $end
$var reg 8 ) f [7:0] $end
$var reg 8 * k [7:0] $end
$var reg 3 + r [2:0] $end
$var reg 7 , reg_bits_w [6:0] $end
$var reg 1 ! s $end
$scope module myreg8 $end
$var wire 7 - regbits [6:0] $end
$var wire 3 . highest1_index [2:0] $end
$var wire 3 / highest0_index [2:0] $end
$var reg 7 0 k_val [6:0] $end
$var reg 3 1 reg_length [2:0] $end
$scope module high_0 $end
$var wire 7 2 bits [6:0] $end
$var wire 3 3 index [2:0] $end
$scope begin _gen[0] $end
$upscope $end
$scope begin _gen[1] $end
$upscope $end
$scope begin _gen[2] $end
$upscope $end
$scope begin _gen[3] $end
$upscope $end
$scope begin _gen[4] $end
$upscope $end
$scope begin _gen[5] $end
$upscope $end
$scope begin _gen[6] $end
$upscope $end
$upscope $end
$scope module high_1 $end
$var wire 7 4 bits [6:0] $end
$var wire 3 5 index [2:0] $end
$scope begin _gen[0] $end
$upscope $end
$scope begin _gen[1] $end
$upscope $end
$scope begin _gen[2] $end
$upscope $end
$scope begin _gen[3] $end
$upscope $end
$scope begin _gen[4] $end
$upscope $end
$scope begin _gen[5] $end
$upscope $end
$scope begin _gen[6] $end
$upscope $end
$upscope $end
$scope begin _ $end
$var reg 7 6 leading_count [6:0] $end
$upscope $end
$upscope $end
$scope begin _ $end
$var reg 8 7 abs_posit [7:0] $end
$var reg 7 8 k_value [6:0] $end
$var reg 1 9 pos_sign $end
$var reg 8 : posit_body [7:0] $end
$var reg 3 ; reg_length [2:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b110 ;
b1 :
09
b1111010 8
b1 7
b110 6
b0 5
b1 4
b110 3
b1 2
b110 1
b1111010 0
b110 /
b0 .
b1 -
b1 ,
b110 +
b11111010 *
b0 )
b1111010 (
b110 '
b1 &
b1 %
b0 $
b11111010 #
b110 "
0!
$end
#10
b0 /
b0 3
b110 .
b110 5
b101 #
b101 *
b110 "
b110 +
b0 $
b0 )
b110 ;
b101 8
b110 '
b110 1
b101 (
b101 0
b110 6
b1111110 ,
b1111110 -
b1111110 2
b1111110 4
b1111110 :
b1111110 7
b1111110 %
b1111110 &
#20
b0 #
b0 *
b1 "
b1 +
b11110000 $
b11110000 )
b1 ;
b0 8
b1 '
b1 1
b0 (
b0 0
b101 /
b101 3
b1 6
b1011110 ,
b1011110 -
b1011110 2
b1011110 4
b1011110 :
b1011110 7
b1011110 %
b1011110 &
#30
b11111100 #
b11111100 *
b1111100 8
b1111100 (
b1111100 0
b110 /
b110 3
b10 .
b10 5
b100 "
b100 +
b100 ;
b100 '
b100 1
b100 6
b11000000 $
b11000000 )
b111 ,
b111 -
b111 2
b111 4
b111 :
b111 7
b111 %
b111 &
#40
b11111001 #
b11111001 *
b111 "
b111 +
b111 ;
b1111001 8
b111 '
b111 1
b1111001 (
b1111001 0
b111 .
b111 5
b111 6
b0 $
b0 )
b0 ,
b0 -
b0 2
b0 4
b0 :
b0 7
b0 %
b0 &
#50
b111 /
b111 3
b110 .
b110 5
b110 #
b110 *
b111 "
b111 +
b0 $
b0 )
b111 ;
b110 8
b111 '
b111 1
b110 (
b110 0
b111 6
b1111111 ,
b1111111 -
b1111111 2
b1111111 4
b1111111 :
b1111111 7
b1111111 %
b1111111 &
#60
