$date
	Sun Dec  5 17:34:53 2021
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module highest_set_tb $end
$var wire 3 ! index_v3 [2:0] $end
$var wire 3 " index_v2 [2:0] $end
$var wire 3 # index_v1 [2:0] $end
$var reg 1 $ diff $end
$var reg 8 % posit8 [7:0] $end
$scope module highest_set_inst1 $end
$var wire 8 & bits [7:0] $end
$var wire 3 ' index [2:0] $end
$scope begin _gen[0] $end
$upscope $end
$scope begin _gen[1] $end
$upscope $end
$scope begin _gen[2] $end
$upscope $end
$scope begin _gen[3] $end
$upscope $end
$scope begin _gen[4] $end
$upscope $end
$scope begin _gen[5] $end
$upscope $end
$scope begin _gen[6] $end
$upscope $end
$scope begin _gen[7] $end
$upscope $end
$upscope $end
$scope module highest_set_inst2 $end
$var wire 8 ( bits [7:0] $end
$var wire 8 ) index_bit [7:0] $end
$var wire 3 * index [2:0] $end
$var wire 8 + _wire [7:0] $end
$scope begin genblk1[0] $end
$scope module mux_inst $end
$var wire 1 , a $end
$var wire 1 - and_in $end
$var wire 1 . and_out $end
$var wire 1 / b $end
$var wire 1 0 sel $end
$var wire 1 1 mux_out $end
$upscope $end
$upscope $end
$scope begin genblk1[1] $end
$scope module mux_inst $end
$var wire 1 2 a $end
$var wire 1 3 and_in $end
$var wire 1 4 and_out $end
$var wire 1 5 b $end
$var wire 1 6 sel $end
$var wire 1 7 mux_out $end
$upscope $end
$upscope $end
$scope begin genblk1[2] $end
$scope module mux_inst $end
$var wire 1 8 a $end
$var wire 1 9 and_in $end
$var wire 1 : and_out $end
$var wire 1 ; b $end
$var wire 1 < sel $end
$var wire 1 = mux_out $end
$upscope $end
$upscope $end
$scope begin genblk1[3] $end
$scope module mux_inst $end
$var wire 1 > a $end
$var wire 1 ? and_in $end
$var wire 1 @ and_out $end
$var wire 1 A b $end
$var wire 1 B sel $end
$var wire 1 C mux_out $end
$upscope $end
$upscope $end
$scope begin genblk1[4] $end
$scope module mux_inst $end
$var wire 1 D a $end
$var wire 1 E and_in $end
$var wire 1 F and_out $end
$var wire 1 G b $end
$var wire 1 H sel $end
$var wire 1 I mux_out $end
$upscope $end
$upscope $end
$scope begin genblk1[5] $end
$scope module mux_inst $end
$var wire 1 J a $end
$var wire 1 K and_in $end
$var wire 1 L and_out $end
$var wire 1 M b $end
$var wire 1 N sel $end
$var wire 1 O mux_out $end
$upscope $end
$upscope $end
$scope begin genblk1[6] $end
$scope module mux_inst $end
$var wire 1 P a $end
$var wire 1 Q and_in $end
$var wire 1 R and_out $end
$var wire 1 S b $end
$var wire 1 T sel $end
$var wire 1 U mux_out $end
$upscope $end
$upscope $end
$upscope $end
$scope module highest_set_inst3 $end
$var wire 8 V _index_bit_tmp [7:0] $end
$var wire 8 W bits [7:0] $end
$var wire 3 X index [2:0] $end
$var wire 8 Y index_bit [7:0] $end
$var wire 8 Z bits_reversed [7:0] $end
$scope function c2 $end
$var reg 8 [ a [7:0] $end
$upscope $end
$scope begin genblk1[0] $end
$upscope $end
$scope begin genblk1[1] $end
$upscope $end
$scope begin genblk1[2] $end
$upscope $end
$scope begin genblk1[3] $end
$upscope $end
$scope begin genblk1[4] $end
$upscope $end
$scope begin genblk1[5] $end
$upscope $end
$scope begin genblk1[6] $end
$upscope $end
$scope begin genblk1[7] $end
$upscope $end
$scope begin genblk2[0] $end
$upscope $end
$scope begin genblk2[1] $end
$upscope $end
$scope begin genblk2[2] $end
$upscope $end
$scope begin genblk2[3] $end
$upscope $end
$scope begin genblk2[4] $end
$upscope $end
$scope begin genblk2[5] $end
$upscope $end
$scope begin genblk2[6] $end
$upscope $end
$scope begin genblk2[7] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b10000000 [
b10000000 Z
b1 Y
bz X
b1 W
b10000000 V
1U
0T
0S
0R
0Q
1P
1O
0N
0M
0L
0K
1J
1I
0H
0G
0F
0E
1D
1C
0B
0A
0@
0?
1>
1=
0<
0;
0:
09
18
17
06
05
04
03
12
11
00
0/
1.
1-
1,
b11111111 +
b0 *
b1 )
b1 (
b0 '
b1 &
b1 %
0$
b0 #
b0 "
bz !
$end
#10
b1 #
b1 '
0$
b1 "
b1 *
b10 Y
0.
b1000000 V
b11111110 +
01
b10 )
14
b11000000 [
10
13
b11000000 Z
b11 %
b11 &
b11 (
b11 W
#20
b11 #
b11 '
0,
0$
07
b11 "
b11 *
02
b1000 Y
01
04
b11111000 +
0=
b1000 )
1@
b10000 [
b10000 V
00
0-
03
1<
1?
b10000 Z
b1000 %
b1000 &
b1000 (
b1000 W
#30
b101 #
b101 '
01
0,
0$
07
b101 "
b101 *
02
08
0>
b100000 Y
0=
0C
0@
b11100000 +
0I
0F
b100000 )
1L
b1100 [
b100 V
0<
1B
0?
1H
1E
1K
b1100 Z
b110000 %
b110000 &
b110000 (
b110000 W
#40
b110 #
b110 '
0$
b110 "
b110 *
0F
0>
0D
b1000000 Y
0I
b11000000 +
0O
0L
b1000000 )
1R
b10101010 [
b10 V
1-
16
19
0H
1N
0K
1Q
b10101010 Z
b1010101 %
b1010101 &
b1010101 (
b1010101 W
#50
0$
b10000000 Y
b111 #
b111 '
0R
0J
b111 "
b111 *
b1 V
b10000000 +
0U
b11 [
0-
06
09
0B
0E
1T
b10000000 )
b11 Z
b11000000 %
b11000000 &
b11000000 (
b11000000 W
#60
b10000000 Y
b11111111 [
b1 V
10
1-
16
13
1<
19
1B
1?
1H
1E
1K
b11111111 Z
b11111111 %
b11111111 &
b11111111 (
b11111111 W
#70
