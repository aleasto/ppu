$date
	Sun Dec  5 15:45:43 2021
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module highest_set_tb $end
$var wire 3 ! index_v2 [2:0] $end
$var wire 3 " index_v1 [2:0] $end
$var reg 1 # diff $end
$var reg 8 $ posit8 [7:0] $end
$scope module highest_set_inst1 $end
$var wire 8 % bits [7:0] $end
$var wire 3 & index [2:0] $end
$scope begin _gen[0] $end
$upscope $end
$scope begin _gen[1] $end
$upscope $end
$scope begin _gen[2] $end
$upscope $end
$scope begin _gen[3] $end
$upscope $end
$scope begin _gen[4] $end
$upscope $end
$scope begin _gen[5] $end
$upscope $end
$scope begin _gen[6] $end
$upscope $end
$scope begin _gen[7] $end
$upscope $end
$upscope $end
$scope module highest_set_inst2 $end
$var wire 8 ' bits [7:0] $end
$var wire 8 ( index_bit [7:0] $end
$var wire 3 ) index [2:0] $end
$var wire 8 * _wire [7:0] $end
$scope begin genblk1[0] $end
$scope module mux_inst $end
$var wire 1 + a $end
$var wire 1 , and_in $end
$var wire 1 - and_out $end
$var wire 1 . b $end
$var wire 1 / sel $end
$var wire 1 0 mux_out $end
$upscope $end
$upscope $end
$scope begin genblk1[1] $end
$scope module mux_inst $end
$var wire 1 1 a $end
$var wire 1 2 and_in $end
$var wire 1 3 and_out $end
$var wire 1 4 b $end
$var wire 1 5 sel $end
$var wire 1 6 mux_out $end
$upscope $end
$upscope $end
$scope begin genblk1[2] $end
$scope module mux_inst $end
$var wire 1 7 a $end
$var wire 1 8 and_in $end
$var wire 1 9 and_out $end
$var wire 1 : b $end
$var wire 1 ; sel $end
$var wire 1 < mux_out $end
$upscope $end
$upscope $end
$scope begin genblk1[3] $end
$scope module mux_inst $end
$var wire 1 = a $end
$var wire 1 > and_in $end
$var wire 1 ? and_out $end
$var wire 1 @ b $end
$var wire 1 A sel $end
$var wire 1 B mux_out $end
$upscope $end
$upscope $end
$scope begin genblk1[4] $end
$scope module mux_inst $end
$var wire 1 C a $end
$var wire 1 D and_in $end
$var wire 1 E and_out $end
$var wire 1 F b $end
$var wire 1 G sel $end
$var wire 1 H mux_out $end
$upscope $end
$upscope $end
$scope begin genblk1[5] $end
$scope module mux_inst $end
$var wire 1 I a $end
$var wire 1 J and_in $end
$var wire 1 K and_out $end
$var wire 1 L b $end
$var wire 1 M sel $end
$var wire 1 N mux_out $end
$upscope $end
$upscope $end
$scope begin genblk1[6] $end
$scope module mux_inst $end
$var wire 1 O a $end
$var wire 1 P and_in $end
$var wire 1 Q and_out $end
$var wire 1 R b $end
$var wire 1 S sel $end
$var wire 1 T mux_out $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
1T
0S
0R
0Q
0P
1O
1N
0M
0L
0K
0J
1I
1H
0G
0F
0E
0D
1C
1B
0A
0@
0?
0>
1=
1<
0;
0:
09
08
17
16
05
04
03
02
11
10
0/
0.
1-
1,
1+
b11111111 *
b0 )
b1 (
b1 '
b0 &
b1 %
b1 $
0#
b0 "
b0 !
$end
#10
b1 "
b1 &
0#
b1 !
b1 )
0-
b11111110 *
00
b10 (
13
1/
12
b11 $
b11 %
b11 '
#20
b11 "
b11 &
0+
0#
06
b11 !
b11 )
01
00
03
b11111000 *
0<
b1000 (
1?
0/
0,
02
1;
1>
b1000 $
b1000 %
b1000 '
#30
b101 "
b101 &
00
0+
0#
06
b101 !
b101 )
01
07
0=
0<
0B
0?
b11100000 *
0H
0E
b100000 (
1K
0;
1A
0>
1G
1D
1J
b110000 $
b110000 %
b110000 '
#40
b110 "
b110 &
0#
b110 !
b110 )
0E
0=
0C
0H
b11000000 *
0N
0K
b1000000 (
1Q
1,
15
18
0G
1M
0J
1P
b1010101 $
b1010101 %
b1010101 '
#50
0#
b111 "
b111 &
0Q
0I
b111 !
b111 )
b10000000 *
0T
0,
05
08
0A
0D
1S
b10000000 (
b11000000 $
b11000000 %
b11000000 '
#60
1/
1,
15
12
1;
18
1A
1>
1G
1D
1J
b11111111 $
b11111111 %
b11111111 '
#70
