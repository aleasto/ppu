$date
	Sun Dec  5 16:44:02 2021
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module highest_set_tb $end
$var wire 3 ! index_v2 [2:0] $end
$var wire 3 " index_v1 [2:0] $end
$var reg 1 # diff $end
$var reg 8 $ posit8 [7:0] $end
$scope module highest_set_inst1 $end
$var wire 8 % bits [7:0] $end
$var wire 3 & index [2:0] $end
$scope begin _gen[0] $end
$upscope $end
$scope begin _gen[1] $end
$upscope $end
$scope begin _gen[2] $end
$upscope $end
$scope begin _gen[3] $end
$upscope $end
$scope begin _gen[4] $end
$upscope $end
$scope begin _gen[5] $end
$upscope $end
$scope begin _gen[6] $end
$upscope $end
$scope begin _gen[7] $end
$upscope $end
$upscope $end
$scope module highest_set_inst2 $end
$var wire 8 ' bits [7:0] $end
$var wire 8 ( index_bit [7:0] $end
$var wire 3 ) index [2:0] $end
$var wire 8 * _wire [7:0] $end
$scope function log2 $end
$var reg 8 + in [7:0] $end
$scope begin _log2_fun $end
$var reg 8 , val [7:0] $end
$upscope $end
$upscope $end
$scope begin genblk1[0] $end
$scope module mux_inst $end
$var wire 1 - a $end
$var wire 1 . and_in $end
$var wire 1 / and_out $end
$var wire 1 0 b $end
$var wire 1 1 sel $end
$var wire 1 2 mux_out $end
$upscope $end
$upscope $end
$scope begin genblk1[1] $end
$scope module mux_inst $end
$var wire 1 3 a $end
$var wire 1 4 and_in $end
$var wire 1 5 and_out $end
$var wire 1 6 b $end
$var wire 1 7 sel $end
$var wire 1 8 mux_out $end
$upscope $end
$upscope $end
$scope begin genblk1[2] $end
$scope module mux_inst $end
$var wire 1 9 a $end
$var wire 1 : and_in $end
$var wire 1 ; and_out $end
$var wire 1 < b $end
$var wire 1 = sel $end
$var wire 1 > mux_out $end
$upscope $end
$upscope $end
$scope begin genblk1[3] $end
$scope module mux_inst $end
$var wire 1 ? a $end
$var wire 1 @ and_in $end
$var wire 1 A and_out $end
$var wire 1 B b $end
$var wire 1 C sel $end
$var wire 1 D mux_out $end
$upscope $end
$upscope $end
$scope begin genblk1[4] $end
$scope module mux_inst $end
$var wire 1 E a $end
$var wire 1 F and_in $end
$var wire 1 G and_out $end
$var wire 1 H b $end
$var wire 1 I sel $end
$var wire 1 J mux_out $end
$upscope $end
$upscope $end
$scope begin genblk1[5] $end
$scope module mux_inst $end
$var wire 1 K a $end
$var wire 1 L and_in $end
$var wire 1 M and_out $end
$var wire 1 N b $end
$var wire 1 O sel $end
$var wire 1 P mux_out $end
$upscope $end
$upscope $end
$scope begin genblk1[6] $end
$scope module mux_inst $end
$var wire 1 Q a $end
$var wire 1 R and_in $end
$var wire 1 S and_out $end
$var wire 1 T b $end
$var wire 1 U sel $end
$var wire 1 V mux_out $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
1V
0U
0T
0S
0R
1Q
1P
0O
0N
0M
0L
1K
1J
0I
0H
0G
0F
1E
1D
0C
0B
0A
0@
1?
1>
0=
0<
0;
0:
19
18
07
06
05
04
13
12
01
00
1/
1.
1-
b0 ,
b1 +
b11111111 *
b0 )
b1 (
b1 '
b0 &
b1 %
b1 $
0#
b0 "
b0 !
$end
#10
b1 "
b1 &
0#
b1 !
b1 )
0/
b0 ,
b10 +
b11111110 *
02
b10 (
15
11
14
b11 $
b11 %
b11 '
#20
b11 "
b11 &
0-
0#
08
b11 !
b11 )
03
b0 ,
b1000 +
02
05
b11111000 *
0>
b1000 (
1A
01
0.
04
1=
1@
b1000 $
b1000 %
b1000 '
#30
b101 "
b101 &
02
0-
0#
08
b101 !
b101 )
03
09
0?
b0 ,
b100000 +
0>
0D
0A
b11100000 *
0J
0G
b100000 (
1M
0=
1C
0@
1I
1F
1L
b110000 $
b110000 %
b110000 '
#40
b110 "
b110 &
0#
b110 !
b110 )
0G
0?
0E
b0 ,
b1000000 +
0J
b11000000 *
0P
0M
b1000000 (
1S
1.
17
1:
0I
1O
0L
1R
b1010101 $
b1010101 %
b1010101 '
#50
0#
b111 "
b111 &
0S
0K
b111 !
b111 )
b10000000 *
0V
b0 ,
b10000000 +
0.
07
0:
0C
0F
1U
b10000000 (
b11000000 $
b11000000 %
b11000000 '
#60
11
1.
17
14
1=
1:
1C
1@
1I
1F
1L
b11111111 $
b11111111 %
b11111111 '
#70
