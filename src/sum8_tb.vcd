$date
	Thu Nov 18 20:24:32 2021
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module sum8_tb $end
$var wire 8 ! p8c [7:0] $end
$var reg 8 " p8x [7:0] $end
$var reg 8 # p8y [7:0] $end
$scope module sum8_inst $end
$var wire 8 $ p8x [7:0] $end
$var wire 8 % p8y [7:0] $end
$var wire 1 & sy $end
$var wire 1 ' sx $end
$var wire 3 ( ry [2:0] $end
$var wire 3 ) rx [2:0] $end
$var wire 8 * p8c [7:0] $end
$var wire 8 + ky [7:0] $end
$var wire 8 , kx [7:0] $end
$var wire 8 - fy [7:0] $end
$var wire 8 . fx [7:0] $end
$var reg 8 / alpha [7:0] $end
$var reg 8 0 alpha1 [7:0] $end
$var reg 8 1 fc [7:0] $end
$var reg 9 2 fc_handle [8:0] $end
$var reg 8 3 fx1 [7:0] $end
$var reg 8 4 fy1 [7:0] $end
$var reg 8 5 kc [7:0] $end
$var reg 8 6 kc_handle [7:0] $end
$var reg 1 7 sc $end
$scope module d8x $end
$var wire 8 8 p8 [7:0] $end
$var wire 3 9 reg_length_w [2:0] $end
$var wire 7 : k_value_w [6:0] $end
$var reg 8 ; f [7:0] $end
$var reg 8 < k [7:0] $end
$var reg 3 = r [2:0] $end
$var reg 7 > reg_bits_w [6:0] $end
$var reg 1 ' s $end
$scope module myreg8 $end
$var wire 7 ? regbits [6:0] $end
$var wire 3 @ highest1_index [2:0] $end
$var wire 3 A highest0_index [2:0] $end
$var reg 7 B k_val [6:0] $end
$var reg 3 C reg_length [2:0] $end
$scope module high_0 $end
$var wire 7 D bits [6:0] $end
$var wire 3 E index [2:0] $end
$scope begin _gen[0] $end
$upscope $end
$scope begin _gen[1] $end
$upscope $end
$scope begin _gen[2] $end
$upscope $end
$scope begin _gen[3] $end
$upscope $end
$scope begin _gen[4] $end
$upscope $end
$scope begin _gen[5] $end
$upscope $end
$scope begin _gen[6] $end
$upscope $end
$upscope $end
$scope module high_1 $end
$var wire 7 F bits [6:0] $end
$var wire 3 G index [2:0] $end
$scope begin _gen[0] $end
$upscope $end
$scope begin _gen[1] $end
$upscope $end
$scope begin _gen[2] $end
$upscope $end
$scope begin _gen[3] $end
$upscope $end
$scope begin _gen[4] $end
$upscope $end
$scope begin _gen[5] $end
$upscope $end
$scope begin _gen[6] $end
$upscope $end
$upscope $end
$scope begin _ $end
$var reg 7 H leading_count [6:0] $end
$upscope $end
$upscope $end
$scope begin _ $end
$var reg 8 I abs_posit [7:0] $end
$var reg 7 J k_value [6:0] $end
$var reg 1 K pos_sign $end
$var reg 8 L posit_body [7:0] $end
$var reg 3 M reg_length [2:0] $end
$upscope $end
$upscope $end
$scope module d8y $end
$var wire 8 N p8 [7:0] $end
$var wire 3 O reg_length_w [2:0] $end
$var wire 7 P k_value_w [6:0] $end
$var reg 8 Q f [7:0] $end
$var reg 8 R k [7:0] $end
$var reg 3 S r [2:0] $end
$var reg 7 T reg_bits_w [6:0] $end
$var reg 1 & s $end
$scope module myreg8 $end
$var wire 7 U regbits [6:0] $end
$var wire 3 V highest1_index [2:0] $end
$var wire 3 W highest0_index [2:0] $end
$var reg 7 X k_val [6:0] $end
$var reg 3 Y reg_length [2:0] $end
$scope module high_0 $end
$var wire 7 Z bits [6:0] $end
$var wire 3 [ index [2:0] $end
$scope begin _gen[0] $end
$upscope $end
$scope begin _gen[1] $end
$upscope $end
$scope begin _gen[2] $end
$upscope $end
$scope begin _gen[3] $end
$upscope $end
$scope begin _gen[4] $end
$upscope $end
$scope begin _gen[5] $end
$upscope $end
$scope begin _gen[6] $end
$upscope $end
$upscope $end
$scope module high_1 $end
$var wire 7 \ bits [6:0] $end
$var wire 3 ] index [2:0] $end
$scope begin _gen[0] $end
$upscope $end
$scope begin _gen[1] $end
$upscope $end
$scope begin _gen[2] $end
$upscope $end
$scope begin _gen[3] $end
$upscope $end
$scope begin _gen[4] $end
$upscope $end
$scope begin _gen[5] $end
$upscope $end
$scope begin _gen[6] $end
$upscope $end
$upscope $end
$scope begin _ $end
$var reg 7 ^ leading_count [6:0] $end
$upscope $end
$upscope $end
$scope begin _ $end
$var reg 8 _ abs_posit [7:0] $end
$var reg 7 ` k_value [6:0] $end
$var reg 1 a pos_sign $end
$var reg 8 b posit_body [7:0] $end
$var reg 3 c reg_length [2:0] $end
$upscope $end
$upscope $end
$scope module e8c $end
$var wire 8 d f [7:0] $end
$var wire 8 e k [7:0] $end
$var wire 3 f r [2:0] $end
$var wire 1 7 s $end
$var wire 8 g pos_regime [7:0] $end
$var reg 8 h p8 [7:0] $end
$var reg 8 i pos_content [7:0] $end
$var reg 8 j pos_mant [7:0] $end
$var reg 3 k reg_length [2:0] $end
$scope module myger8 $end
$var wire 8 l f_exp [7:0] $end
$var reg 8 m abs_f_exp [7:0] $end
$var reg 8 n regbits [7:0] $end
$scope begin _ $end
$var reg 8 o built_reg [7:0] $end
$var reg 3 p low_exp [2:0] $end
$var reg 8 q reg_placeholder [7:0] $end
$var reg 8 r shifted_reg [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b11111100 r
b10000000 q
b101 p
b10 o
b10 n
b101 m
b11111011 l
b100 k
b0 j
b10 i
b10 h
b10 g
bz f
b11111011 e
b0 d
b110 c
b1 b
0a
b1111010 `
b1 _
b110 ^
b0 ]
b1 \
b110 [
b1 Z
b110 Y
b1111010 X
b110 W
b0 V
b1 U
b1 T
b110 S
b11111010 R
b0 Q
b1111010 P
b110 O
b1 N
b110 M
b1 L
0K
b1111010 J
b1 I
b110 H
b0 G
b1 F
b110 E
b1 D
b110 C
b1111010 B
b110 A
b0 @
b1 ?
b1 >
b110 =
b11111010 <
b0 ;
b1111010 :
b110 9
b1 8
07
b11111011 6
b11111010 5
b0 4
b0 3
b0 2
b0 1
b0 0
b1 /
b0 .
b0 -
b11111010 ,
b11111010 +
b10 *
b110 )
b110 (
0'
0&
b1 %
b1 $
b1 #
b1 "
b10 !
$end
#10
b11 !
b11 *
b11 h
b11 i
b1 j
b10000000 1
b10000000 d
b10000000 2
b0 /
b10000000 3
b11111011 5
b11111011 +
b11111011 R
b101 (
b101 S
b101 c
b1111011 `
b101 O
b101 Y
b1111011 P
b1111011 X
b1 V
b1 ]
b101 ^
b10 T
b10 U
b10 Z
b10 \
b10 b
b10 _
b10 #
b10 %
b10 N
#20
b100 g
b100 n
b100 o
b11111000 r
b100 p
b100 m
b100 !
b100 *
b100 h
b100 i
b0 j
b11 k
b11111100 6
b11111100 e
b11111100 l
b0 1
b0 d
b1 0
b100000000 2
b10000000 4
b101 ^
b10000000 -
b10000000 Q
b11 T
b11 U
b11 Z
b11 \
b11 b
b11 _
b11 #
b11 %
b11 N
#30
b1000000 3
b11111100 5
b11111100 +
b11111100 R
b100 (
b100 S
b100 c
b1111100 `
b100 O
b100 Y
b1111100 P
b1111100 X
b10 V
b10 ]
b100 g
b100 n
b100 o
b11111000 r
b100 p
b100 m
b101 !
b101 *
b101 h
b101 i
b1 j
b11 k
b11111100 6
b11111100 e
b11111100 l
b1000000 1
b1000000 d
b0 0
b1000000 2
b0 4
b100 ^
b0 -
b0 Q
b100 T
b100 U
b100 Z
b100 \
b100 b
b100 _
b100 #
b100 %
b100 N
#40
b110 !
b110 *
b110 h
b110 i
b10 j
b10000000 1
b10000000 d
b10000000 2
b1000000 4
b100 ^
b1000000 -
b1000000 Q
b101 T
b101 U
b101 Z
b101 \
b101 b
b101 _
b101 #
b101 %
b101 N
#50
