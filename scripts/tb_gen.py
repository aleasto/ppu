# pip install posit_playground

import random
import datetime
from posit_playground import from_bits
from posit_playground.utils import get_bin

DECODE = 0
ENCODE = 1
X = "'bx"
random.seed(4)


N, ES = 8, 0
NUM_RANDOM_TEST_CASES = 300

if __name__ == "__main__":

    c = f"""\t/*-------------------------------------+
    | autogenerated by tb_gen.py on       |
    | {datetime.datetime.now().strftime('%c')}            |
    +-------------------------------------*/\n"""

    list_a = random.sample(range(0, 2 ** N - 1), min(NUM_RANDOM_TEST_CASES, 2 ** N - 1))

    for (counter, a) in enumerate(list_a):
        p = from_bits(a, N, ES)

        c += f"{'test_no ='.ljust(25)} {counter+1};\n"

        if DECODE:
            # posit bits
            c += f"{'bits ='.ljust(25)} {N}'b{get_bin(p.bit_repr(), N)};\n"
            # sign
            c += f"{'sign_expected ='.ljust(25)} {p.sign};\n"
            # regime
            c += f"{'reg_s_expected ='.ljust(25)} {p.regime.reg_s.unwrap_or(X)};\n"
            c += f"{'reg_len_expected ='.ljust(25)} {p.regime.reg_len.unwrap_or(X)};\n"
            # c += f"{'k_expected ='.ljust(25)} {p.regime.k.unwrap_or(X)};\n"
            c += f"{'regime_bits_expected ='.ljust(25)} {N}'b{get_bin(p.regime.calc_reg_bits(), N)};\n"
            # exponent
            c += f"{'exp_expected ='.ljust(25)} {N}'b{get_bin(p.exp, N)};\n"
            # mantissa
            c += f"{'mant_expected ='.ljust(25)} {N}'b{get_bin(p.mant, N)};\n"
        elif ENCODE:
            c += f"{'posit_expected ='.ljust(25)} {N}'b{get_bin(p.bit_repr(), N)};\n"
            ### sign
            c += f"{'sign ='.ljust(25)} {p.sign};\n"
            ###Â regime
            c += f"{'reg_s ='.ljust(25)} {p.regime.reg_s.unwrap_or(X)};\n"
            c += f"{'reg_len ='.ljust(25)} {p.regime.reg_len.unwrap_or(X)};\n"
            # c += f"{'k ='.ljust(25)} {p.regime.k.unwrap_or(X)};\n"
            c += f"{'regime_bits ='.ljust(25)} {N}'b{get_bin(p.regime.calc_reg_bits(), N)};\n"
            ### exponent
            c += f"{'exp ='.ljust(25)} {N}'b{get_bin(p.exp, N)};\n"
            ### mantissa
            c += f"{'mant ='.ljust(25)} {N}'b{get_bin(p.mant, N)};\n"

        c += f"{'is_zero ='.ljust(25)} {p.is_zero.real};\n"
        c += f"{'is_inf ='.ljust(25)} {p.is_inf.real};\n"
        c += f"#10;\n\n"

    if ENCODE:
        with open(f"../src/tb_posit_encode_P{N}E{ES}.sv", "w") as f:
            f.write(c)
